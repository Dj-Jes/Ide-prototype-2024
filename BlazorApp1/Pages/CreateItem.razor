@page "/CreateItem"
<h3>Create Item</h3>

@using Data.Entities
@using Shared.DAO
@using BlazorApp1.HttpClient.ItemHttpClient
@inject IItemHttpClient ItemService
@using System.ComponentModel.DataAnnotations;

<head>
    <link rel="stylesheet" href="css/Styles.css">
</head>

@if (_successMessage)
{
    <div class="alert alert-success" role="alert">
        @_message
    </div>
}

<form class="item-form" @onsubmit="HandleValidSubmit">
    <div class="form-group">
        <label for="type">Type:</label>
        <input type="text" class="form-control" id="type" @bind-value="@_item.Type" required>
    </div>
    <div class="form-group">
        <label for="weight">Weight kg:</label>
        <input type="number" class="form-control" id="weight" @bind-value="@_item.Weight" step="0.001" required min="0.001">
        <div class="invalid-feedback">Weight must be a positive number greater than or equal to 0.001.</div>
    </div>
    <div class="form-group">
        <labe for="sortingCategory">Sorting Category:</labe>
    </div>
    <div class="form-group">
        <InputSelect @bind-Value="_item.SoteringCategory">
            @foreach (var category in Enum.GetValues(typeof(SorteringCategory)))
            {
                <option value="@category">@category.ToString()</option>
            }

        </InputSelect>
    </div>
    <div class="button-style">
        <button type="submit" class="btn btn-primary">Create Item</button>
    </div>
</form>


@code {
    private Item _item = new Item();
    private bool _successMessage = false;
    private string _message;
    
    private void ResetForm()
    {
        _item.Type = "";
        _item.Weight = 0;
        _item.SoteringCategory = SorteringCategory.HardPlast;
    }

    private async Task HandleValidSubmit()
    {
        CreateItemDAO itemDao = new CreateItemDAO();

        itemDao.Type = _item.Type;
        itemDao.Weight = _item.Weight;
        itemDao.SoteringCategory = _item.SoteringCategory;

        _item = await ItemService.CreateItem(itemDao);

        _message = "Item created successfully";
        _successMessage = true;
        ResetForm();
        StateHasChanged();
        await Task.Delay(5000);
        _successMessage = false;
        StateHasChanged();
    }

}