@page "/Stats"
<script src="drawGraph.js"></script>
@using BlazorApp1.HttpClient.ItemHttpClient
@using Data.Entities
@using Shared.DAO
@using BlazorApp1.components
@inject IItemHttpClient ItemService
@inject IJSRuntime JSRuntime



<h3>Item Statistics</h3>

@if (CurrentYearCounts.Count > 0)
{
    <h4>Current Year</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Month and year</th>
                <th>Total weight reused</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var monthlyCount in CurrentYearCounts)
            {
                <tr>
                    <td>@GetMonthName(monthlyCount.Month) @currentDate.Year</td>
                    <td>@monthlyCount.Count</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (PreviousYearCounts.Count > 0)
{
    <h4>Previous Year</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Month</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var monthlyCount in PreviousYearCounts)
            {
                <tr>
                    <td>@GetMonthName(monthlyCount.Month) @previousYear.Year</td>
                    <td>@monthlyCount.Count</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (CurrentYearCounts.Count > 0 || PreviousYearCounts.Count > 0)
{
    <Graph CurrentData="CurrentYearCounts" PreviousData="PreviousYearCounts"></Graph>
}

@code {
    public class MonthlyCount
    {
        public int Month { get; set; }
        public decimal Count { get; set; }
    }

    [Parameter]
    public List<MonthlyCount> CurrentYearCounts { get; set; } = new List<MonthlyCount>();
    [Parameter]
    public List<MonthlyCount> PreviousYearCounts { get; set; } = new List<MonthlyCount>();
    
    public List<Item> Items { get; set; } = new List<Item>();
    
    public DateTime currentDate = DateTime.Now;
    public DateTime previousYear = DateTime.Now.AddYears(-1);
    
    
    protected override async Task OnInitializedAsync()
    {
        await GetItems();
        CalculateStats();
        
    }
    

    private async Task GetItems()
    {
        GetItemsDAO _items = new GetItemsDAO();
        _items.IsTaken = true;
        Items = await ItemService.GetItem(_items);
    }

    private void CalculateStats()
    {
        foreach (var item in Items)
        {
            var year = item.TakenDate.Year;
            var month = item.TakenDate.Month;
            var count = item.Weight;

            if (year == currentDate.Year)
            {
                UpdateMonthlyCount(CurrentYearCounts, month, count);
            }
            else if (year == previousYear.Year)
            {
                UpdateMonthlyCount(PreviousYearCounts, month, count);
            }
        }
    }

    private void UpdateMonthlyCount(List<MonthlyCount> counts, int month, decimal count)
    {
        var existingCount = counts.FirstOrDefault(c => c.Month == month);
        if (existingCount == null)
        {
            counts.Add(new MonthlyCount { Month = month, Count = count });
        }
        else
        {
            existingCount.Count += count;
        }
    }

    private string GetMonthName(int month)
    {
        return new DateTime(2024, month, 1).ToString("MMMM");
    }

   
}
